library(Hmisc)
library(corrplot)
library(DiscriMiner)
library(missMDA)
library(FactoMineR)
library(factoextra)
library(mice)
library(mixOmics)
12*3+16*2+13*2.5+17*1.5
126/9
rm(list=ls())
source("https://www.irit.fr/~Edouard.Pauwels/tps/tpACP.R")
notes <- DataNotes()
colMeans(notes)
X <- scale(notes, center = T, scale = F)
X
t(X)
summary(X)
boxplot(X)
Sigma <- (1/nrow(X)) * t(X) %*% X
V <- eigen(Sigma)
V$values
V$vectors
C <- X %*% V$vectors
C
PartInertie <- (V$values[1] + V$values[2]) / sum(V$values)
plot(C[, 1:2])
plot(C[, 1:2], xlab = "Composante 1", ylab = "Composante 2")
cos2 <- (C[, 1]^2 + C[, 2]^2) / rowSums(C^2)
cos2
plot(C, cex=cos2)
text(C, labels = rownames(C), col="red")
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C, labels = rownames(C), col="red")
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C+1, labels = rownames(C), col="red")
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C[, 1]+1, C[, 2], labels = rownames(C), col="red")
V$vectors
rho1 <- matrix(0, ncol(C), 1)
for(j in 1:ncol(C)){
rho1[j] <- (sqrt(V$values[1]) / sqrt(Sigma[j, j])) * V$vectors[j, 1]
}
rho2 <- matrix(0, ncol(C), 1)
for(j in 1:ncol(C)){
rho2[j] <- (sqrt(V$values[2]) / sqrt(Sigma[j, j])) * V$vectors[j, 2]
}
rho <- cbind(rho1, rho2)
View(rho)
rho
rownames(rho) <- colnames(X) # Pour nommer correctement les variables
CercleCor(rho)
rm(list=ls())
source("https://www.irit.fr/~Edouard.Pauwels/tps/tpACP.R")
arcs <-DataSkyrim()
X <- scale(arcs, center = T, scale = F)
boxplot(X)
boxplot(X)
X <- scale(arcs, center = T, scale = T)
boxplot(X)
Sigma <- (1/nrow(X)) * t(X) %*% X
V <- eigen(Sigma)
V$values
V$vectors
C <- X %*% V$vectors
PartInertie <- (V$values[1] + V$values[2]) / sum(V$values)
plot(C[, 1:2])
cos2 <- (C[, 1]^2 + C[, 2]^2) / rowSums(C^2)
cos2
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C[, 1]+1, C[, 2], labels = rownames(C), col="red")
text(C[, 1], C[, 2], labels = rownames(C), col="red")
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C[, 1], C[, 2], labels = rownames(C), col="red")
text(C[, 1], C[, 2], labels = rownames(C), col="red", cex=0.5)
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C[, 1], C[, 2], labels = rownames(C), col="red", cex=0.5)
text(C[, 1], C[, 2], labels = rownames(C), col="red", cex=0.7)
plot(C, cex=cos2, xlab = "Composante 1", ylab = "Composante 2")
text(C[, 1], C[, 2], labels = rownames(C), col="red", cex=0.7)
V$vectors
rho1 <- matrix(0, ncol(C), 1)
for(j in 1:ncol(C)){
rho1[j] <- (sqrt(V$values[1]) / sqrt(Sigma[j, j])) * V$vectors[j, 1]
}
rho2 <- matrix(0, ncol(C), 1)
for(j in 1:ncol(C)){
rho2[j] <- (sqrt(V$values[2]) / sqrt(Sigma[j, j])) * V$vectors[j, 2]
}
rho <- cbind(rho1, rho2)
rownames(rho) <- colnames(X) # Pour nommer correctement les variables
CercleCor(rho)
Sigma <- (1/nrow(X)) * t(X) %*% X
V <- eigen(Sigma)
V$values
V$vectors
C <- X %*% V$vectors
C
PartInertie
rm(list=ls())
source("https://www.irit.fr/~Edouard.Pauwels/tps/tpACP.R")
notes <- DataNotes()
ACP <- prcomp(notes)
biplot(ACP)
biplot(ACP)
Skyrim <- scale(DataSkyrim())
ACP <- prcomp(Skyrim)
biplot(ACP)
biplot(ACP)
biplot(ACP)
ACP <- prcomp(notes)
biplot(ACP)
setwd("~/")
setwd("D:/Projet_Motus/Data")
liste <- read.table("liste_francais.txt", header=T, encoding = "UTF-8")
liste <- read.table("liste_francais.txt", header=T, encoding = "UTF-8")
liste <- read.table("liste_francais.txt", header=T, sep="/t" encoding = "UTF-8")
liste <- read.table("liste_francais.txt", header=T, sep="/t", encoding = "UTF-8")
liste <- read.table("liste_francais.txt", header=T, sep="\t", encoding = "UTF-8")
View(liste)
liste <- read.table("liste_francais.txt", header=T, sep="\t", encoding = "UTF-8")
summary(liste$X1_graph)
summary(liste)
liste2 <- 4 < liste[, length(liste$X1_graph)] < 10
liste2 <- 4 < liste[, length(liste$X1_graph)]
liste2 <- 4 < liste[length(liste$X1_graph)]
liste2 <- 4 < liste[length(liste)]
View(liste2)
liste2 <- 4 < liste[length(liste$X1_graph)]
